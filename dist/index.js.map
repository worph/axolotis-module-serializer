{"version":3,"sources":["../src/index.ts","../src/services/serializer/DefaultSerializer.ts","../src/services/serializer/SerializerEngine.ts","../src/Identifier.ts"],"sourcesContent":["import {AxModule} from \"axolotis-module-definition\";\r\nimport {ContainerModule, interfaces} from \"inversify\";\r\nimport {SerializerEngine} from \"./services/serializer/SerializerEngine\";\r\nimport {SerializerEngineName} from \"./Identifier\";\r\n\r\nexport * from \"./services/serializer/SerializerEngine\";\r\nexport * from \"./services/serializer/Serializer\";\r\n\r\nexport * from \"./Identifier\";\r\n\r\nexport class AxSerializerModule implements AxModule{\r\n    getModule(): ContainerModule {\r\n        return new ContainerModule((bind: interfaces.Bind) => {\r\n            bind(SerializerEngineName).toDynamicValue(() => {\r\n                return new SerializerEngine();\r\n            }).inSingletonScope();\r\n        });\r\n    }\r\n\r\n}\r\n","import {\r\n    GenericSerialisationData,\r\n    GenericSerializable,\r\n    Serializer\r\n} from \"./Serializer\";\r\n\r\n/**\r\n * The aims of this serializer is to be able to serialize any primitive type and any object\r\n */\r\nexport class DefaultSerializer implements Serializer<any> {\r\n    specialListException = [\r\n        ArrayBuffer,\r\n        Int8Array,\r\n        Uint8Array,\r\n        Uint8ClampedArray,\r\n        Int16Array,\r\n        Uint16Array,\r\n        Int32Array,\r\n        Uint32Array,\r\n        Float32Array,\r\n        Float64Array,\r\n        BigInt64Array,\r\n        BigUint64Array\r\n    ]\r\n\r\n    deserialize(data: any, reviver?: (obj: GenericSerialisationData) => GenericSerializable): any {\r\n        ///////////////////////////\r\n        //Basic Expression check\r\n        ///////////////////////////\r\n        if (data === undefined) {\r\n            return undefined;\r\n        }\r\n        if (data === null) {\r\n            return null;\r\n        }\r\n        if (typeof data === \"string\" || typeof data === \"number\" || typeof data === \"boolean\") {\r\n            return data;\r\n        }\r\n        //the following object can be parsed natively no need to interfere\r\n\r\n        for (const specialListExceptionElement of this.specialListException) {\r\n            if (data instanceof Object && data instanceof specialListExceptionElement) {\r\n                return data;\r\n            }\r\n        }\r\n        if (data[\"serializeID\"]) {\r\n            throw new Error();\r\n        }\r\n\r\n        //Deserialize\r\n        if (data.type === 'Map') {\r\n            let dataRet = new Map();\r\n            for (const [key, value] of (data.value as [any,any][])) {\r\n                dataRet.set(reviver(key), reviver(value));\r\n            }\r\n            return dataRet;\r\n        } else if (data instanceof Array) {\r\n            let dataRet = [];\r\n            for (let i = 0; i < data.length; i++) {\r\n                dataRet[i] = reviver(data[i]);\r\n            }\r\n            return dataRet;\r\n        } else if (data instanceof Object) {\r\n            let ret = {};\r\n            for (const dataKey in data) {\r\n                ret[dataKey] = reviver(data[dataKey]);\r\n            }\r\n            return ret;\r\n        } else {\r\n            return data;\r\n        }\r\n\r\n    }\r\n\r\n    serialize(data: any, replacer?: (obj: GenericSerializable) => GenericSerialisationData): any {\r\n        ///////////////////////////\r\n        //Basic Expression check\r\n        ///////////////////////////\r\n        if (data === undefined) {\r\n            return undefined;\r\n        }\r\n        if (data === null) {\r\n            return null;\r\n        }\r\n        if (typeof data === \"string\" || typeof data === \"number\" || typeof data === \"boolean\") {\r\n            return data;\r\n        }\r\n        //the following object can be parsed natively no need to interfere\r\n        for (const specialListExceptionElement of this.specialListException) {\r\n            if (data instanceof Object && data instanceof specialListExceptionElement) {\r\n                return data;\r\n            }\r\n        }\r\n        if (data[\"serializeID\"]) {\r\n            throw new Error();\r\n        }\r\n\r\n        ///////////\r\n        //serialize\r\n        ///////////\r\n        if (data instanceof Array) {\r\n            for (let i = 0; i < data.length; i++) {\r\n                data[i] = replacer(data[i]);\r\n            }\r\n            return data;\r\n        } else if (data instanceof Map) {\r\n            let dataRet = new Map();\r\n            for (const [key, value] of (data as Map<any, any>)) {\r\n                dataRet.set(replacer(key), replacer(value));\r\n            }\r\n            return {\r\n                type: 'Map',\r\n                value: Array.from(dataRet.entries()),\r\n            };\r\n        } else if (data instanceof Object) {\r\n            let ret = {};\r\n            for (const dataKey in data) {\r\n                ret[dataKey] = replacer(data[dataKey]);\r\n            }\r\n            return ret;\r\n        } else {\r\n            return JSON.parse(JSON.stringify(data));//keeps only data\r\n        }\r\n    }\r\n\r\n\r\n    getSerializeID(): string {\r\n        return null;//default special case\r\n    }\r\n}\r\n","import {DefaultSerializer} from \"./DefaultSerializer\";\r\nimport {\r\n    GenericSerialisationData,\r\n    GenericSerializable, SerializableType,\r\n    Serializer,\r\n} from \"./Serializer\";\r\n\r\nexport class SerializerEngine {\r\n    seriList: { [id: string]: Serializer<any> } = {};\r\n    defaultSeri = new DefaultSerializer();\r\n\r\n    registerDataType(objSerializer: Serializer<any>) {\r\n        this.seriList[objSerializer.getSerializeID()] = objSerializer;\r\n    }\r\n\r\n    reviver = <T extends SerializableType>(subobj: GenericSerialisationData): T => {\r\n        return this.deserialize<T>(subobj);\r\n    }\r\n\r\n    replacer = (subobj: GenericSerializable) => {\r\n        return this.serialise(subobj);\r\n    }\r\n\r\n    serializeToString(obj: GenericSerializable): string {\r\n        return JSON.stringify(this.serialise(obj));\r\n    }\r\n\r\n    deserializeFromString<T extends SerializableType>(obj: string): T {\r\n        return this.deserialize<T>(JSON.parse(obj));\r\n    }\r\n\r\n    serialise(obj: GenericSerializable): GenericSerialisationData {\r\n        let seri:Serializer<any> = this.defaultSeri;\r\n        if (obj && ((obj as any).serializeID && this.seriList[(obj as any).serializeID])) {\r\n            seri = this.seriList[(obj as any).serializeID];\r\n        }\r\n        return seri.serialize(obj, this.replacer);\r\n    }\r\n\r\n    deserialize<T extends SerializableType>(data: GenericSerialisationData): T {\r\n        let seri:any = this.defaultSeri;\r\n        if (data && ((data as any).serializeID && this.seriList[(data as any).serializeID])) {\r\n            seri = this.seriList[(data as any).serializeID];\r\n        }\r\n        return seri.deserialize(data, this.reviver);\r\n    }\r\n\r\n}\r\n","export const SerializerEngineName = Symbol.for(\"SerializerEngineName\");\r\n"],"mappings":"AACA,OAAQ,mBAAAA,MAAkC,YCQnC,IAAMC,EAAN,KAAmD,CACtD,qBAAuB,CACnB,YACA,UACA,WACA,kBACA,WACA,YACA,WACA,YACA,aACA,aACA,cACA,cACJ,EAEA,YAAYC,EAAWC,EAAuE,CAI1F,GAAID,IAAS,OAGb,IAAIA,IAAS,KACT,OAAO,KAEX,GAAI,OAAOA,GAAS,UAAY,OAAOA,GAAS,UAAY,OAAOA,GAAS,UACxE,OAAOA,EAIX,QAAWE,KAA+B,KAAK,qBAC3C,GAAIF,aAAgB,QAAUA,aAAgBE,EAC1C,OAAOF,EAGf,GAAIA,EAAK,YACL,MAAM,IAAI,MAId,GAAIA,EAAK,OAAS,MAAO,CACrB,IAAIG,EAAU,IAAI,IAClB,OAAW,CAACC,EAAKC,CAAK,IAAML,EAAK,MAC7BG,EAAQ,IAAIF,EAAQG,CAAG,EAAGH,EAAQI,CAAK,CAAC,EAE5C,OAAOF,UACAH,aAAgB,MAAO,CAC9B,IAAIG,EAAU,CAAC,EACf,QAASG,EAAI,EAAGA,EAAIN,EAAK,OAAQM,IAC7BH,EAAQG,CAAC,EAAIL,EAAQD,EAAKM,CAAC,CAAC,EAEhC,OAAOH,UACAH,aAAgB,OAAQ,CAC/B,IAAIO,EAAM,CAAC,EACX,QAAWC,KAAWR,EAClBO,EAAIC,CAAO,EAAIP,EAAQD,EAAKQ,CAAO,CAAC,EAExC,OAAOD,MAEP,QAAOP,EAGf,CAEA,UAAUA,EAAWS,EAAwE,CAIzF,GAAIT,IAAS,OAGb,IAAIA,IAAS,KACT,OAAO,KAEX,GAAI,OAAOA,GAAS,UAAY,OAAOA,GAAS,UAAY,OAAOA,GAAS,UACxE,OAAOA,EAGX,QAAWE,KAA+B,KAAK,qBAC3C,GAAIF,aAAgB,QAAUA,aAAgBE,EAC1C,OAAOF,EAGf,GAAIA,EAAK,YACL,MAAM,IAAI,MAMd,GAAIA,aAAgB,MAAO,CACvB,QAAS,EAAI,EAAG,EAAIA,EAAK,OAAQ,IAC7BA,EAAK,CAAC,EAAIS,EAAST,EAAK,CAAC,CAAC,EAE9B,OAAOA,UACAA,aAAgB,IAAK,CAC5B,IAAIG,EAAU,IAAI,IAClB,OAAW,CAACC,EAAKC,CAAK,IAAML,EACxBG,EAAQ,IAAIM,EAASL,CAAG,EAAGK,EAASJ,CAAK,CAAC,EAE9C,MAAO,CACH,KAAM,MACN,MAAO,MAAM,KAAKF,EAAQ,QAAQ,CAAC,CACvC,UACOH,aAAgB,OAAQ,CAC/B,IAAIO,EAAM,CAAC,EACX,QAAWC,KAAWR,EAClBO,EAAIC,CAAO,EAAIC,EAAST,EAAKQ,CAAO,CAAC,EAEzC,OAAOD,MAEP,QAAO,KAAK,MAAM,KAAK,UAAUP,CAAI,CAAC,EAE9C,CAGA,gBAAyB,CACrB,OAAO,IACX,CACJ,EC1HO,IAAMU,EAAN,KAAuB,CAC1B,SAA8C,CAAC,EAC/C,YAAc,IAAIC,EAElB,iBAAiBC,EAAgC,CAC7C,KAAK,SAASA,EAAc,eAAe,CAAC,EAAIA,CACpD,CAEA,QAAuCC,GAC5B,KAAK,YAAeA,CAAM,EAGrC,SAAYA,GACD,KAAK,UAAUA,CAAM,EAGhC,kBAAkBC,EAAkC,CAChD,OAAO,KAAK,UAAU,KAAK,UAAUA,CAAG,CAAC,CAC7C,CAEA,sBAAkDA,EAAgB,CAC9D,OAAO,KAAK,YAAe,KAAK,MAAMA,CAAG,CAAC,CAC9C,CAEA,UAAUA,EAAoD,CAC1D,IAAIC,EAAuB,KAAK,YAChC,OAAID,GAASA,EAAY,aAAe,KAAK,SAAUA,EAAY,WAAW,IAC1EC,EAAO,KAAK,SAAUD,EAAY,WAAW,GAE1CC,EAAK,UAAUD,EAAK,KAAK,QAAQ,CAC5C,CAEA,YAAwCE,EAAmC,CACvE,IAAID,EAAW,KAAK,YACpB,OAAIC,GAAUA,EAAa,aAAe,KAAK,SAAUA,EAAa,WAAW,IAC7ED,EAAO,KAAK,SAAUC,EAAa,WAAW,GAE3CD,EAAK,YAAYC,EAAM,KAAK,OAAO,CAC9C,CAEJ,EC/CO,IAAMC,EAAuB,OAAO,IAAI,sBAAsB,EHU9D,IAAMC,EAAN,KAA4C,CAC/C,WAA6B,CACzB,OAAO,IAAIC,EAAiBC,GAA0B,CAClDA,EAAKC,CAAoB,EAAE,eAAe,IAC/B,IAAIC,CACd,EAAE,iBAAiB,CACxB,CAAC,CACL,CAEJ","names":["ContainerModule","DefaultSerializer","data","reviver","specialListExceptionElement","dataRet","key","value","i","ret","dataKey","replacer","SerializerEngine","DefaultSerializer","objSerializer","subobj","obj","seri","data","SerializerEngineName","AxSerializerModule","ContainerModule","bind","SerializerEngineName","SerializerEngine"]}
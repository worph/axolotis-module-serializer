{"version":3,"sources":["../src/index.ts","../src/services/serializer/DefaultSerializer.ts","../src/services/serializer/SerializerEngine.ts","../src/Identifier.ts"],"sourcesContent":["import {AxModule} from \"axolotis-module-definition\";\r\nimport {ContainerModule, interfaces} from \"inversify\";\r\nimport {SerializerEngine} from \"./services/serializer/SerializerEngine\";\r\nimport {SerializerEngineName} from \"./Identifier\";\r\n\r\nexport * from \"./services/serializer/SerializerEngine\";\r\nexport * from \"./services/serializer/Serializer\";\r\n\r\nexport * from \"./Identifier\";\r\n\r\nexport class AxSerializerModule implements AxModule{\r\n    getModule(): ContainerModule {\r\n        return new ContainerModule((bind: interfaces.Bind) => {\r\n            bind(SerializerEngineName).toDynamicValue(() => {\r\n                return new SerializerEngine();\r\n            }).inSingletonScope();\r\n        });\r\n    }\r\n\r\n}\r\n","import {\r\n    GenericSerialisationData,\r\n    GenericSerializable,\r\n    Serializer\r\n} from \"./Serializer\";\r\n\r\n/**\r\n * The aims of this serializer is to be able to serialize any primitive type and any object\r\n */\r\nexport class DefaultSerializer implements Serializer<any> {\r\n\r\n    strictMode: boolean = false;\r\n\r\n    /**\r\n     * In strict mode Object (Records) are not allowed\r\n     * @param strictMode\r\n     */\r\n    setStrictMode(strictMode: boolean): void {\r\n        this.strictMode = strictMode;\r\n    }\r\n\r\n    arrayTypes = {\r\n        \"SharedArrayBuffer\": typeof SharedArrayBuffer !== 'undefined'?SharedArrayBuffer:ArrayBuffer,\r\n        \"ArrayBuffer\": ArrayBuffer,\r\n        \"Int8Array\": Int8Array,\r\n        \"Uint8Array\": Uint8Array,\r\n        \"Uint8ClampedArray\": Uint8ClampedArray,\r\n        \"Int16Array\": Int16Array,\r\n        \"Uint16Array\": Uint16Array,\r\n        \"Int32Array\": Int32Array,\r\n        \"Uint32Array\": Uint32Array,\r\n        \"Float32Array\": Float32Array,\r\n        \"Float64Array\": Float64Array,\r\n        \"BigInt64Array\": BigInt64Array,\r\n        \"BigUint64Array\": BigUint64Array\r\n    }\r\n\r\n    private encodeTypedArray(typedArray: ArrayBuffer | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array | BigInt64Array | BigUint64Array): string {\r\n        let binary = '';\r\n        let buffer;\r\n        if (typeof SharedArrayBuffer !== 'undefined') {\r\n            buffer = (typedArray instanceof ArrayBuffer || typedArray instanceof SharedArrayBuffer) ? typedArray : typedArray.buffer;\r\n        }else {\r\n            buffer = typedArray instanceof ArrayBuffer ? typedArray : typedArray.buffer;\r\n        }\r\n        let bytes = new Uint8Array(buffer);\r\n        for (let byte of bytes) {\r\n            binary += String.fromCharCode(byte);\r\n        }\r\n        let type = typedArray.constructor.name;\r\n        if (typeof btoa !== 'undefined') {\r\n            // In a browser, use the built-in btoa function\r\n            return type + \":\" + btoa(binary);\r\n        } else if (typeof Buffer !== 'undefined') {\r\n            // In Node.js, use the Buffer object\r\n            return type + \":\" + Buffer.from(binary, 'binary').toString('base64');\r\n        } else {\r\n            throw new Error('Cannot encode ArrayBuffer to Base64 string');\r\n        }\r\n    }\r\n\r\n    private decodeTypedArray(base64String: string): any {\r\n        let [type, base64Data] = base64String.split(\":\");\r\n        if (type === \"ArrayBuffer\" || type === \"SharedArrayBuffer\") {\r\n            const binary = typeof atob !== 'undefined'\r\n                ? atob(base64Data)\r\n                : Buffer.from(base64Data, 'base64').toString('binary');\r\n\r\n            let buffer;\r\n            if (typeof SharedArrayBuffer !== 'undefined' && type === \"SharedArrayBuffer\") {\r\n                buffer = new SharedArrayBuffer(binary.length);\r\n            }else {\r\n                buffer = new ArrayBuffer(binary.length);\r\n            }\r\n            const view = new Uint8Array(buffer);\r\n\r\n            for (let i = 0; i < binary.length; i++) {\r\n                view[i] = binary.charCodeAt(i);\r\n            }\r\n\r\n            return buffer;\r\n        }\r\n\r\n        if (!this.arrayTypes.hasOwnProperty(type)) {\r\n            return base64String;\r\n        }\r\n\r\n        let binary;\r\n        if (typeof atob !== 'undefined') {\r\n            // In a browser, use the built-in atob function\r\n            binary = atob(base64Data);\r\n        } else if (typeof Buffer !== 'undefined') {\r\n            // In Node.js, use the Buffer object\r\n            binary = Buffer.from(base64Data, 'base64').toString('binary');\r\n        } else {\r\n            throw new Error('Cannot decode Base64 string to ArrayBuffer');\r\n        }\r\n\r\n        let bytes = new Uint8Array(binary.length);\r\n        for (let i = 0; i < binary.length; i++) {\r\n            bytes[i] = binary.charCodeAt(i);\r\n        }\r\n        return new this.arrayTypes[type](bytes.buffer);\r\n    }\r\n\r\n\r\n    deserialize(data: any, reviver?: (obj: GenericSerialisationData) => GenericSerializable): any {\r\n        if(!reviver){\r\n            reviver = (obj: GenericSerialisationData) => {\r\n                return this.deserialize(obj);\r\n            }\r\n        }\r\n        ///////////////////////////\r\n        //Basic Expression check\r\n        ///////////////////////////\r\n        if (data === undefined) {\r\n            return undefined;\r\n        }\r\n        if (data === null) {\r\n            return null;\r\n        }\r\n\r\n        if (typeof data === \"string\") {\r\n            return this.decodeTypedArray(data);\r\n        } else if (typeof data === \"number\" || typeof data === \"boolean\") {\r\n            return data;\r\n        }\r\n\r\n        if (data[\"getSerialisationID\"]) {\r\n            console.warn(\"Cannot use default to deserialize a serializable object :\"+data.getSerialisationID());\r\n            return undefined;\r\n        }\r\n        if ( data[\"serializeID\"]) {\r\n            console.warn(\"Cannot use default to deserialize a serializable object :\"+data[\"serializeID\"]);\r\n            return undefined;\r\n        }\r\n\r\n        //Deserialize\r\n        if (data.type === 'Map') {\r\n            let dataRet = new Map();\r\n            for (const [key, value] of (data.value as [any,any][])) {\r\n                dataRet.set(reviver(key), reviver(value));\r\n            }\r\n            return dataRet;\r\n        } else if (data.type === \"Set\") {\r\n            let dataRet = new Set();\r\n            for (const value of data.value as any[]) {\r\n                dataRet.add(reviver(value));\r\n            }\r\n            return dataRet;\r\n        } else if (data instanceof Array) {\r\n            let dataRet = [];\r\n            for (let i = 0; i < data.length; i++) {\r\n                dataRet[i] = reviver(data[i]);\r\n            }\r\n            return dataRet;\r\n        } else if (data instanceof Object) {\r\n            let ret = {};\r\n            for (const dataKey in data) {\r\n                ret[dataKey] = reviver(data[dataKey]);\r\n            }\r\n            return ret;\r\n        } else {\r\n            return data;\r\n        }\r\n\r\n    }\r\n\r\n    serialize(data: any, replacer?: (obj: GenericSerializable) => GenericSerialisationData): any {\r\n        if(!replacer){\r\n            replacer = (obj: GenericSerializable) => {\r\n                return this.serialize(obj);\r\n            }\r\n        }\r\n        ///////////////////////////\r\n        //Basic Expression check\r\n        ///////////////////////////\r\n        if (data === undefined) {\r\n            return undefined;\r\n        }\r\n        if (data === null) {\r\n            return null;\r\n        }\r\n        if (typeof data === \"string\" || typeof data === \"number\" || typeof data === \"boolean\") {\r\n            return data;\r\n        }\r\n        //the following object can be parsed natively no need to interfere\r\n        for (const specialListExceptionElement in this.arrayTypes) {\r\n            if (data instanceof this.arrayTypes[specialListExceptionElement]) {\r\n                return this.encodeTypedArray(data);\r\n            }\r\n        }\r\n        if (data[\"getSerialisationID\"]) {\r\n            throw new Error(\"Cannot use default to deserialize a serializable object :\"+data.getSerialisationID());\r\n        }\r\n        if ( data[\"serializeID\"]) {\r\n            throw new Error(\"Cannot use default to deserialize a serializable object :\"+data[\"serializeID\"]);\r\n        }\r\n\r\n        ///////////\r\n        //serialize\r\n        ///////////\r\n        if (data instanceof Array) {\r\n            for (let i = 0; i < data.length; i++) {\r\n                data[i] = replacer(data[i]);\r\n            }\r\n            return data;\r\n        } else if (data instanceof Map) {\r\n            let dataRet = new Map();\r\n            for (const [key, value] of (data as Map<any, any>)) {\r\n                dataRet.set(replacer(key), replacer(value));\r\n            }\r\n            return {\r\n                type: 'Map',\r\n                value: Array.from(dataRet.entries()),\r\n            };\r\n        } else if (data instanceof Set) {\r\n            let dataRet = new Set();\r\n            for (const value of data) {\r\n                dataRet.add(replacer(value));\r\n            }\r\n            return {\r\n                type: 'Set',\r\n                value: Array.from(dataRet),\r\n            };\r\n        } else if (data instanceof Object) {\r\n            if(this.strictMode){\r\n                console.warn(\"Strict mode is enabled and Object are not allowed\")\r\n            }\r\n            let ret = {};\r\n            for (const dataKey in data) {\r\n                ret[dataKey] = replacer(data[dataKey]);\r\n            }\r\n            return ret;\r\n        } else {\r\n            if(this.strictMode){\r\n                throw new Error(\"Strict mode is enabled and Object are not allowed\");\r\n            }\r\n            return JSON.parse(JSON.stringify(data));//keeps only data\r\n        }\r\n    }\r\n\r\n\r\n    getSerializeID(): string {\r\n        return null;//default special case\r\n    }\r\n}\r\n","import {DefaultSerializer} from \"./DefaultSerializer\";\r\nimport {\r\n    GenericSerialisationData,\r\n    GenericSerializable,\r\n    SerialisationData,\r\n    SerializableType,\r\n    Serializer,\r\n} from \"./Serializer\";\r\n\r\nexport class SerializerEngine {\r\n    seriList: { [id: string]: Serializer<any> } = {};\r\n    defaultSeri = new DefaultSerializer();\r\n\r\n    getDefaultSerializer(): DefaultSerializer {\r\n        return this.defaultSeri;\r\n    }\r\n\r\n    registerDataType(objSerializer: Serializer<any>) {\r\n        this.seriList[objSerializer.getSerializeID()] = objSerializer;\r\n    }\r\n\r\n    reviver = <T extends SerializableType>(subobj: GenericSerialisationData): T => {\r\n        return this.deserialize<T>(subobj);\r\n    }\r\n\r\n    replacer = (subobj: GenericSerializable) => {\r\n        return this.serialize(subobj);\r\n    }\r\n\r\n    serializeToString(obj: GenericSerializable): string {\r\n        return JSON.stringify(this.serialize(obj));\r\n    }\r\n\r\n    deserializeFromString<T extends SerializableType>(obj: string): T {\r\n        return this.deserialize<T>(JSON.parse(obj));\r\n    }\r\n\r\n    serialize(obj: GenericSerializable): GenericSerialisationData {\r\n        if (obj && ((obj as any).getSerialisationID && this.seriList[(obj as any).getSerialisationID()])) {\r\n            let seri:Serializer<any> = this.seriList[(obj as SerializableType).getSerialisationID()];\r\n            if (!seri) throw new Error(\"Serializer not found for \" + (obj as any).getSerialisationID);\r\n            let serializedData = seri.serialize(obj, this.replacer);\r\n            serializedData.serializeID = (obj as SerializableType).getSerialisationID();//ensure that the serializeID is always transmitted\r\n            return serializedData;\r\n        }else {\r\n            let serializedData = this.defaultSeri.serialize(obj, this.replacer);\r\n            return serializedData;\r\n        }\r\n    }\r\n\r\n    deserialize<T extends SerializableType>(data: GenericSerialisationData): T {\r\n        let seri:any = this.defaultSeri;\r\n        if (data && ((data as any).serializeID && this.seriList[(data as any).serializeID])) {\r\n            seri = this.seriList[(data as SerialisationData).serializeID];\r\n        }\r\n        return seri.deserialize(data, this.reviver);\r\n    }\r\n\r\n    /**\r\n     * Checks if the object is serializable. A serializable object has a getSerialisationID and a serializer registered for it.\r\n     * @param obj The object to check\r\n     */\r\n    isSerializable(obj: any) {\r\n        if (obj && ((obj as any).getSerialisationID && this.seriList[(obj as any).getSerialisationID()])) {\r\n            let seri:Serializer<any> = this.seriList[(obj as SerializableType).getSerialisationID()];\r\n            return !!seri;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    clone<T>(data: T):T {\r\n        return this.deserialize<T>(this.serialize(data));\r\n    }\r\n}\r\n","export const SerializerEngineName = Symbol.for(\"SerializerEngineName\");\r\n"],"mappings":"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","names":["src_exports","__export","AxSerializerModule","SerializerEngine","SerializerEngineName","__toCommonJS","import_inversify","DefaultSerializer","strictMode","typedArray","binary","buffer","bytes","byte","type","base64String","base64Data","view","i","data","reviver","obj","dataRet","key","value","ret","dataKey","replacer","specialListExceptionElement","SerializerEngine","DefaultSerializer","objSerializer","subobj","obj","seri","serializedData","data","SerializerEngineName","AxSerializerModule","bind","SerializerEngineName","SerializerEngine"]}